{"version":3,"sources":["StackCards.styled.ts","StackedCards.tsx","serviceWorker.js","index.tsx"],"names":["CardStyled","styled","div","props","genCardStyle","result","i","nCards","gapY","gapX","console","log","StackedCard","cardsToShow","items","delay","cardRemovedClassName","length","React","useState","slice","cards","setCards","activeID","setActiveID","doClick","newCards","removedItem","pop","setTimeout","removedItemIndex","indexOf","newCard","unshift","id","cardsElmts","map","item","data-testid","onClick","key","className","itemRenderFn","useMemo","style","position","Boolean","window","location","hostname","match","ReactDOM","render","marginTop","color","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iYAGO,IAAMA,E,KAAaC,EAAOC,IAAV,KAGnB,SAACC,GAAD,OAAmBC,EAAaD,MAG9BC,EAAe,SAACD,GAEpB,IADA,IAAIE,EAAS,GACJC,EAAI,EAAGA,EAAIH,EAAMI,OAAQD,IAChCD,GAAM,qBAAkBC,EAAI,EAAtB,2BACIA,EAAIH,EAAMK,KADd,8DAIK,KAAOL,EAAMI,OAAS,EAAID,GAAKH,EAAMM,KAJ1C,iGASNJ,GAAU,KAGZ,OADAK,QAAQC,IAAIN,GACLA,G,8NCLT,IAmDeO,EAnDiC,SAC9CT,GACwB,IAAD,EAQnBA,EANFU,mBAFqB,MAEP,EAFO,EAGrBC,EAKEX,EALFW,MAHqB,EAQnBX,EAJFY,aAJqB,MAIb,IAJa,IAQnBZ,EAHFM,YALqB,MAKd,EALc,IAQnBN,EAFFK,YANqB,MAMd,EANc,IAQnBL,EADFa,4BAPqB,MAOE,6BAPF,EASnBH,EAAcC,EAAMG,SAAQJ,EAAcC,EAAMG,QAT7B,MAUGC,IAAMC,SAC9BL,EAAMM,MAAMN,EAAMG,OAASJ,IAXN,mBAUhBQ,EAVgB,KAUTC,EAVS,OAaSJ,IAAMC,UAAU,GAbzB,mBAahBI,EAbgB,KAaNC,EAbM,KAcjBC,EAAU,WACd,IAAIC,EAAWL,EAAMD,QACjBO,EAAcD,EAASE,MAC3BC,YAAW,WACT,GAAIF,EAAa,CACf,IAAIG,EAAmBhB,EAAMiB,QAAQJ,GACjCK,EAAUlB,EAAMgB,EAAmBjB,GACnCmB,GAASN,EAASO,Q,yVAAT,IAAsBD,IACnCV,EAASI,MAEVX,GACCY,GAAaH,EAAYG,EAAYO,KAGvCC,EAAad,EAAMe,KAAI,SAACC,EAAM/B,GAAP,OACzB,kBAACN,EAAD,CACES,KAAMA,EACND,KAAMA,EACND,OAAQc,EAAMJ,OACdqB,cAAA,uBAA6BD,EAAKH,IAClCK,QAASd,EACTe,IAAKH,EAAKH,GACVO,UAAS,UACPJ,EAAKH,KAAOX,EAAWP,EAAuB,GADvC,kBAIRqB,EAAKH,GACN,+BAAQ/B,EAAMuC,cAAgBvC,EAAMuC,aAAaL,QAGrD,OAAOnB,IAAMyB,SACX,kBAAM,yBAAKC,MAAO,CAAEC,SAAU,aAAeV,KAC7C,CAACd,EAAOE,KCvDQuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCDNC,IAASC,OACP,yBAAKR,MAAO,CAAES,UAAW,UACvB,kBAAC,EAAD,CACErC,qBAAsB,gBACtBF,MAhBM,CACV,CAAEoB,GAAI,EAAGoB,MAAO,OAChB,CAAEpB,GAAI,EAAGoB,MAAO,SAChB,CAAEpB,GAAI,EAAGoB,MAAO,QAChB,CAAEpB,GAAI,EAAGoB,MAAO,UAChB,CAAEpB,GAAI,EAAGoB,MAAO,OAChB,CAAEpB,GAAI,EAAGoB,MAAO,SAChB,CAAEpB,GAAI,EAAGoB,MAAO,QAChB,CAAEpB,GAAI,EAAGoB,MAAO,WASZZ,aAPe,SAACL,GAAD,OAAe,6BAAMA,EAAKiB,QAQzCzC,YAAa,KAGjB0C,SAASC,eAAe,SDuGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.784ff11b.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport { StackedCardStyledProps } from \"./StackedCards\";\n\nexport const CardStyled = styled.div<StackedCardStyledProps>`\n  position: absolute;\n  transition: all 300ms ease-in-out;\n  ${(props): string => genCardStyle(props)}\n`;\n\nconst genCardStyle = (props: StackedCardStyledProps) => {\n  let result = \"\";\n  for (var i = 0; i < props.nCards; i++) {\n    result += `:nth-child(${i + 1}){\n      top: ${-i * props.gapY}px;\n      left: 0;\n      right: 0;\n      width: ${100 - (props.nCards - 1 - i) * props.gapX}%;\n      margin: 0 auto;\n      border: 1px solid red;\n      background-color: gray;\n    }`;\n    result += \"\\n\";\n  }\n  console.log(result);\n  return result;\n};\n","import React from \"react\";\nimport { CardStyled } from \"./StackCards.styled\";\n\nexport type StackedCardProps = {\n  cardsToShow?: number;\n  items: any[];\n  delay?: number;\n  cardRemovedClassName?: string;\n  gapX?: number;\n  gapY?: number;\n  itemRenderFn?: (item: any) => React.ReactNode;\n};\n\nexport type StackedCardStyledProps = {\n  nCards: number;\n  gapX: number;\n  gapY: number;\n};\n\nconst StackedCard: React.FC<StackedCardProps> = (\n  props: StackedCardProps\n): React.ReactElement => {\n  let {\n    cardsToShow = 3,\n    items,\n    delay = 400,\n    gapX = 1,\n    gapY = 4,\n    cardRemovedClassName = \"stacked-card-remove-active\"\n  } = props;\n  if (cardsToShow > items.length) cardsToShow = items.length;\n  const [cards, setCards] = React.useState(\n    items.slice(items.length - cardsToShow)\n  );\n  const [activeID, setActiveID] = React.useState(-1);\n  const doClick = () => {\n    let newCards = cards.slice();\n    let removedItem = newCards.pop();\n    setTimeout(() => {\n      if (removedItem) {\n        let removedItemIndex = items.indexOf(removedItem);\n        let newCard = items[removedItemIndex - cardsToShow];\n        if (newCard) newCards.unshift({ ...newCard });\n        setCards(newCards);\n      }\n    }, delay);\n    if (removedItem) setActiveID(removedItem.id);\n  };\n\n  let cardsElmts = cards.map((item, i) => (\n    <CardStyled\n      gapX={gapX}\n      gapY={gapY}\n      nCards={cards.length}\n      data-testid={`stacked-card-${item.id}`}\n      onClick={doClick}\n      key={item.id}\n      className={`${\n        item.id === activeID ? cardRemovedClassName : \"\"\n      } stacked-card`}\n    >\n      {item.id}\n      <div>{!!props.itemRenderFn && props.itemRenderFn(item)}</div>\n    </CardStyled>\n  ));\n  return React.useMemo(\n    () => <div style={{ position: \"relative\" }}>{cardsElmts}</div>,\n    [cards, activeID]\n  );\n};\nexport default StackedCard;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./StackedCards\";\nimport * as serviceWorker from \"./serviceWorker\";\nlet cards = [\n  { id: 1, color: \"red\" },\n  { id: 2, color: \"green\" },\n  { id: 3, color: \"blue\" },\n  { id: 4, color: \"yellow\" },\n  { id: 5, color: \"red\" },\n  { id: 6, color: \"green\" },\n  { id: 7, color: \"blue\" },\n  { id: 8, color: \"yellow\" }\n];\nconst itemRenderFn = (item: any) => <div>{item.color}</div>;\n\nReactDOM.render(\n  <div style={{ marginTop: \"100px\" }}>\n    <App\n      cardRemovedClassName={\"transformThis\"}\n      items={cards}\n      itemRenderFn={itemRenderFn}\n      cardsToShow={4}\n    ></App>\n  </div>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}